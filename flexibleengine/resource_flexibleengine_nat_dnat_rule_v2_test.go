// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package flexibleengine

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/terraform"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/huaweicloud/golangsdk"
)

func TestAccNatDnat_basic(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckNatDnatDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccNatDnat_basic(acctest.RandString(10)),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckNatDnatExists(),
				),
			},
		},
	})
}

func testAccNatDnat_basic(val string) string {
	return fmt.Sprintf(`
resource "flexibleengine_nat_dnat_rule_v2" "dnat" {
  floating_ip_id = "bf99c679-9f41-4dac-8513-9c9228e713e1"
  nat_gateway_id = "bf99c679-9f41-4dac-8513-9c9228e713e1"
  internal_service_port = 993
  protocol = "tcp"
  external_service_port = 242
}
	`)
}

func testAccCheckNatDnatDestroy(s *terraform.State) error {
	config := testAccProvider.Meta().(*Config)
	client, err := config.sdkClient(OS_REGION_NAME, "nat")
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "flexibleengine_nat_dnat" {
			continue
		}

		url, err := replaceVarsForTest(rs, "dnat_ruels/{id}")
		if err != nil {
			return err
		}
		url = client.ServiceURL(url)

		_, err = client.Get(
			url, nil,
			&golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
		if err == nil {
			return fmt.Errorf("flexibleengine_nat_dnat still exists at %s", url)
		}
	}

	return nil
}

func testAccCheckNatDnatExists() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := testAccProvider.Meta().(*Config)
		client, err := config.sdkClient(OS_REGION_NAME, "nat")
		if err != nil {
			return fmt.Errorf("Error creating sdk client, err=%s", err)
		}

		rs, ok := s.RootModule().Resources["flexibleengine_nat_dnat.dnat"]
		if !ok {
			return fmt.Errorf("Error checking flexibleengine_nat_dnat.dnat exist, err=not found flexibleengine_nat_dnat.dnat")
		}

		url, err := replaceVarsForTest(rs, "dnat_ruels/{id}")
		if err != nil {
			return fmt.Errorf("Error checking flexibleengine_nat_dnat.dnat exist, err=building url failed: %s", err)
		}
		url = client.ServiceURL(url)

		_, err = client.Get(
			url, nil,
			&golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
		if err != nil {
			if _, ok := err.(golangsdk.ErrDefault404); ok {
				return fmt.Errorf("flexibleengine_nat_dnat.dnat is not exist")
			}
			return fmt.Errorf("Error checking flexibleengine_nat_dnat.dnat exist, err=send request failed: %s", err)
		}
		return nil
	}
}
