// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package flexibleengine

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/huaweicloud/golangsdk"
)

func TestAccIdentityRoleV3_basic(t *testing.T) {
	roleName := fmt.Sprintf("custom_role-%s", acctest.RandString(10))
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckIdentityRoleV3Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccIdentityRoleV3_basic(roleName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckIdentityRoleV3Exists(),
					resource.TestCheckResourceAttr(
						"flexibleengine_identity_role_v3.role", "name", roleName),
				),
			},
		},
	})
}

func testAccIdentityRoleV3_basic(val string) string {
	return fmt.Sprintf(`
resource "flexibleengine_identity_role_v3" "role" {
  description = "a custom role"
  name = "%s"
  scope = "domain"
  policy {
    effect = "Allow"
    action = ["ecs:*:list*"]
  }
}
	`, val)
}

func testAccCheckIdentityRoleV3Destroy(s *terraform.State) error {
	config := testAccProvider.Meta().(*Config)
	client, err := config.identityV3Client(OS_REGION_NAME)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}
	client.Endpoint = strings.Replace(client.Endpoint, "v3", "v3.0", 1)

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "flexibleengine_identity_role_v3" {
			continue
		}

		url, err := replaceVarsForTest(rs, "OS-ROLE/roles/{id}")
		if err != nil {
			return err
		}
		url = client.ServiceURL(url)

		_, err = client.Get(
			url, nil,
			&golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
		if err == nil {
			return fmt.Errorf("flexibleengine_identity_role_v3 still exists at %s", url)
		}
	}

	return nil
}

func testAccCheckIdentityRoleV3Exists() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := testAccProvider.Meta().(*Config)
		client, err := config.identityV3Client(OS_REGION_NAME)
		if err != nil {
			return fmt.Errorf("Error creating sdk client, err=%s", err)
		}
		client.Endpoint = strings.Replace(client.Endpoint, "v3", "v3.0", 1)

		rs, ok := s.RootModule().Resources["flexibleengine_identity_role_v3.role"]
		if !ok {
			return fmt.Errorf("Error checking flexibleengine_identity_role_v3.role exist, err=not found flexibleengine_identity_role_v3.role")
		}

		url, err := replaceVarsForTest(rs, "OS-ROLE/roles/{id}")
		if err != nil {
			return fmt.Errorf("Error checking flexibleengine_identity_role_v3.role exist, err=building url failed: %s", err)
		}
		url = client.ServiceURL(url)

		_, err = client.Get(
			url, nil,
			&golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
		if err != nil {
			if _, ok := err.(golangsdk.ErrDefault404); ok {
				return fmt.Errorf("flexibleengine_identity_role_v3.role is not exist")
			}
			return fmt.Errorf("Error checking flexibleengine_identity_role_v3.role exist, err=send request failed: %s", err)
		}
		return nil
	}
}
